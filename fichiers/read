def insertion_user(users):
    import dataikuapi
    import pandas as pd
    import urllib3
    import dataiku

    # D√©sactiver l'avertissement SSL
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Configuration Dataiku
    dataiku.set_remote_dss("https://s02v19900033.fr.net.intra:10443", "hnleqTNinL1H4r03oyginesbSmSpXbIN", no_check_certificate=True)
    
    # CIA de votre projet Dataiku
    project_key = "API_MARKETPLACE"

    # Nom de votre dataset
    dataset_name = "dataset_habillitation_marketplace"

    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)

    # Charger les donn√©es actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    results = []

    for user in users:
        i_UID = user.get("i_UID")
        profil = user.get("profil")
        admin = user.get("admin")
        tenant = user.get("tenant")
        groupe = user.get("groupe")

        if i_UID in current_data['i_UID'].values:
            results.append({"i_UID": i_UID, "status": "error", "message": "üö´ L'ID utilisateur '{}' existe d√©j√†.".format(i_UID)})
            continue

        if profil not in ["Reader", "Designer"]:
            results.append({"i_UID": i_UID, "status": "error", "message": "üö´ Profil '{}' non valide.".format(profil)})
            continue

        if not isinstance(admin, bool):
            results.append({"i_UID": i_UID, "status": "error", "message": "üö´ Valeur admin invalide."})
            continue

        # Incr√©menter l'ID
        if current_data.empty or pd.isna(current_data['id'].max()):
            new_id = 1
        else:
            new_id = current_data['id'].max() + 1

        current_data = current_data.append({
            "id": new_id,
            "Tenant": tenant,
            "i_UID": i_UID,
            "Profil": profil,
            "Groupes": groupe,
            "Admin": admin
        }, ignore_index=True)

        results.append({"i_UID": i_UID, "status": "success", "message": "‚úÖ Utilisateur '{}' ajout√©.".format(i_UID)})

    # Mise √† jour de la base de donn√©es
    dataset.write_with_schema(current_data)

    # Convertir les r√©sultats en dataframe pour affichage sous forme de tableau
    return pd.DataFrame(results)





def insertion_user(users):
    import dataikuapi
    import pandas as pd
    import urllib3
    import dataiku

    # D√©sactiver l'avertissement SSL
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Configuration Dataiku
    dataiku.set_remote_dss("https://s02v19900033.fr.net.intra:10443", "hnleqTNinL1H4r03oyginesbSmSpXbIN", no_check_certificate=True)
    
    # CIA de votre projet Dataiku
    project_key = "API_MARKETPLACE"

    # Nom de votre dataset
    dataset_name = "dataset_habillitation_marketplace"

    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)

    # Charger les donn√©es actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    results = []

    for user in users:
        i_UID = user.get("i_UID")
        profil = user.get("profil")
        admin = user.get("admin")
        tenant = user.get("tenant")
        groupe = user.get("groupe")

        # V√©rifier si l'ID de l'utilisateur existe d√©j√†
        if i_UID in current_data['i_UID'].values:
            results.append({"i_UID": i_UID, "status": "error", "message": "ID User already exists in the dataset."})
            continue

        # V√©rification du profil
        if profil not in ["Reader", "Designer"]:
            results.append({"i_UID": i_UID, "status": "error", "message": "Invalid profile value. Accepted values are 'Reader' or 'Designer'."})
            continue

        # V√©rification du statut admin
        if not isinstance(admin, bool):
            results.append({"i_UID": i_UID, "status": "error", "message": "Admin value should be a boolean (True or False)."})
            continue

        # Incr√©menter l'ID
        if current_data.empty or pd.isna(current_data['id'].max()):
            new_id = 1
        else:
            new_id = current_data['id'].max() + 1

        # Ajouter la nouvelle ligne √† la liste des nouvelles entr√©es
        current_data = current_data.append({
            "id": new_id,
            "Tenant": tenant,
            "i_UID": i_UID,
            "Profil": profil,
            "Groupes": groupe,
            "Admin": admin
        }, ignore_index=True)

        results.append({"i_UID": i_UID, "status": "success", "message": "Data added successfully."})

    # Red√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(current_data)

    return results






def insertion_user(users):
    import dataikuapi
    import pandas as pd
    import urllib3
    import dataiku

    # D√©sactiver l'avertissement SSL
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Configuration Dataiku
    dataiku.set_remote_dss("https://s02v19900033.fr.net.intra:10443", "hnleqTNinL1H4r03oyginesbSmSpXbIN", no_check_certificate=True)
    
    # Cl√© de votre projet Dataiku
    project_key = "API_MARKETPLACE"

    # Nom de votre dataset
    dataset_name = "dataset_habillitation_marketplace"

    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)

    # Charger les donn√©es actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    new_rows = []
    results = []

    for user in users:
        i_UID = user.get("i_UID")
        profil = user.get("profil")
        admin = user.get("admin")
        tenant = user.get("tenant")
        groupe = user.get("groupe")

        if not all([i_UID, profil, admin, tenant, groupe]):
            results.append({"status": "error", "message": "Some required fields are missing for one of the users."})
            continue

        if i_UID in current_data['i_UID'].values:
            results.append({"i_UID": i_UID, "status": "error", "message": "ID User already exists in the dataset."})
            continue

        if profil not in ["Reader", "Designer"]:
            results.append({"i_UID": i_UID, "status": "error", "message": "Invalid profile value. Accepted values are 'Reader' or 'Designer'."})
            continue

        if not isinstance(admin, bool):
            results.append({"i_UID": i_UID, "status": "error", "message": "Admin value should be a boolean (True or False)."})
            continue

        # Incr√©menter l'ID
        if current_data.empty or pd.isna(current_data['id'].max()):
            new_id = 1
        else:
            new_id = current_data['id'].max() + 1

        # Ajouter la nouvelle ligne √† la liste des nouvelles entr√©es
        new_rows.append({
            "id": new_id,
            "Tenant": tenant,
            "i_UID": i_UID,
            "Profil": profil,
            "Groupes": groupe,
            "Admin": admin
        })

        results.append({"i_UID": i_UID, "status": "success", "message": "Data added successfully"})

    # Convertir la liste des nouvelles entr√©es en DataFrame
    new_data = pd.DataFrame(new_rows)

    # Ajouter les nouvelles lignes au DataFrame existant
    updated_data = pd.concat([current_data, new_data], ignore_index=True)

    # Red√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(updated_data)

    return results






def insertion_user(users):
    import dataikuapi
    import pandas as pd
    import urllib3
    import dataiku

    # D√©sactiver l'avertissement SSL
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Configuration Dataiku
    dataiku.set_remote_dss("https://s02v19900033.fr.net.intra:10443", "hnleqTNinL1H4r03oyginesbSmSpXbIN", no_check_certificate=True)
    
    # Cl√© de votre projet Dataiku
    project_key = "API_MARKETPLACE"

    # Nom de votre dataset
    dataset_name = "dataset_habillitation_marketplace"

    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)

    # Charger les donn√©es actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    new_rows = []
    results = []

    for user in users:
        i_UID = user.get("i_UID")
        profil = user.get("profil")
        admin = user.get("admin")
        tenant = user.get("tenant")
        groupe = user.get("groupe")

        if i_UID in current_data['i_UID'].values:
            results.append({"i_UID": i_UID, "status": "error", "message": "ID User already exists in the dataset."})
            continue

        if profil not in ["Reader", "Designer"]:
            results.append({"i_UID": i_UID, "status": "error", "message": "Invalid profile value. Accepted values are 'Reader' or 'Designer'."})
            continue

        if not isinstance(admin, bool):
            results.append({"i_UID": i_UID, "status": "error", "message": "Admin value should be a boolean (True or False)."})
            continue

        # Incr√©menter l'ID
        if current_data.empty or pd.isna(current_data['id'].max()):
            new_id = 1
        else:
            new_id = current_data['id'].max() + 1

        # Ajouter la nouvelle ligne √† la liste des nouvelles entr√©es
        new_rows.append({
            "id": new_id,
            "Tenant": tenant,
            "i_UID": i_UID,
            "Profil": profil,
            "Groupes": groupe,
            "Admin": admin
        })

        results.append({"i_UID": i_UID, "status": "success", "message": "Data added successfully"})

    # Convertir la liste des nouvelles entr√©es en DataFrame
    new_data = pd.DataFrame(new_rows)

    # Ajouter les nouvelles lignes au DataFrame existant
    updated_data = pd.concat([current_data, new_data], ignore_index=True)

    # Red√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(updated_data)

    return results




def insertion_user(users):
    import dataikuapi
    import pandas as pd
    import urllib3
    import dataiku

    # D√©sactiver l'avertissement SSL
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Configuration Dataiku
    dataiku.set_remote_dss("https://s02v19900033.fr.net.intra:10443", "hnleqTNinL1H4r03oyginesbSmSpXbIN", no_check_certificate=True)
    
    # Cl√© de votre projet Dataiku
    project_key = "API_MARKETPLACE"

    # Nom de votre dataset
    dataset_name = "dataset_habillitation_marketplace"

    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)

    # Charger les donn√©es actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    results = []

    for user in users:
        i_UID = user.get("i_UID")
        profil = user.get("profil")
        admin = user.get("admin")
        tenant = user.get("tenant")
        groupe = user.get("groupe")

        if i_UID in current_data['i_UID'].values:
            results.append({"i_UID": i_UID, "status": "error", "message": "ID User already exists in the dataset."})
            continue

        if profil not in ["Reader", "Designer"]:
            results.append({"i_UID": i_UID, "status": "error", "message": "Invalid profile value. Accepted values are 'Reader' or 'Designer'."})
            continue

        if not isinstance(admin, bool):
            results.append({"i_UID": i_UID, "status": "error", "message": "Admin value should be a boolean (True or False)."})
            continue

        # Incr√©menter l'ID
        if current_data.empty or pd.isna(current_data['id'].max()):
            new_id = 1
        else:
            new_id = current_data['id'].max() + 1

        # Cr√©er un DataFrame pour l'utilisateur actuel
        new_data = pd.DataFrame([{
            "id": new_id,
            "Tenant": tenant,
            "i_UID": i_UID,
            "Profil": profil,
            "Groupes": groupe,
            "Admin": admin
        }])

        # √âcrire la nouvelle entr√©e dans le dataset
        dataset.write_with_schema(new_data)

        # Ajouter un rapport de succ√®s pour cet utilisateur
        results.append({"i_UID": i_UID, "status": "success", "message": "Data added successfully"})

    return results







def insertion_user(users):
    import dataikuapi
    import pandas as pd
    import urllib3
    import dataiku

    # D√©sactiver l'avertissement SSL
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Configuration Dataiku
    dataiku.set_remote_dss("https://s02v19900033.fr.net.intra:10443", "hnleqTNinL1H4r03oyginesbSmSpXbIN", no_check_certificate=True)
    
    # CIA de votre projet Dataiku
    project_key = "API_MARKETPLACE"

    # Nom de votre dataset
    dataset_name = "dataset_habillitation_marketplace"

    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)

    # Charger les donn√©es actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    new_rows = []

    for user in users:
        i_UID = user.get("i_UID")
        profil = user.get("profil")
        admin = user.get("admin")
        tenant = user.get("tenant")
        groupe = user.get("groupe")

        if i_UID in current_data['i_UID'].values:
            return {"status": "error", "message": "ID User already exists in the dataset."}

        if profil not in ["Reader", "Designer"]:
            return {"status": "error", "message": "Invalid profile value. Accepted values are 'Reader' or 'Designer'."}

        if not isinstance(admin, bool):
            return {"status": "error", "message": "Admin value should be a boolean (True or False)."}

        # Incr√©menter l'ID
        if current_data.empty or pd.isna(current_data['id'].max()):
            new_id = 1
        else:
            new_id = current_data['id'].max() + 1

        # Ajouter la nouvelle ligne √† la liste des nouvelles entr√©es
        new_rows.append({
            "id": new_id,
            "Tenant": tenant,
            "i_UID": i_UID,
            "Profil": profil,
            "Groupes": groupe,
            "Admin": admin
        })

    # Convertir la liste des nouvelles entr√©es en DataFrame
    new_data = pd.DataFrame(new_rows)

    # Ajouter les nouvelles lignes au DataFrame existant
    updated_data = pd.concat([current_data, new_data], ignore_index=True)

    # Red√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(updated_data)

    return {"status": "success", "message": "Data added successfully"}







def api_py_function(users):
    import dataikuapi
    import pandas as pd
    import urllib3
    import dataiku

    # ... [la m√™me initialisation que vous avez d√©j√†] ...

    # Charger les donn√©es actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    new_rows = []

    for user in users:
        # V√©rifiez les entr√©es pour chaque utilisateur
        uid = user.get("i_UID")
        email = user.get("profil")
        admin = user.get("admin")
        profile = user.get("groupe")

        if email in current_data['profil'].values:
            return {"status": "error", "message": f"Email {email} already exists in the dataset."}

        if uid in current_data['i_UID'].values:
            return {"status": "error", "message": f"UID {uid} already exists in the dataset."}

        if profile not in ["Reader", "Designer"]:
            return {"status": "error", "message": "Invalid profile value. Accepted values are 'Reader' or 'Designer'."}

        if not isinstance(admin, bool):
            return {"status": "error", "message": "Admin value should be a boolean (True or False)."}

        # Si tout est correct, ajoutez l'utilisateur √† la liste des nouvelles lignes
        new_rows.append(user)

    # Convertir la liste des nouvelles lignes en DataFrame
    new_data = pd.DataFrame(new_rows)

    # Ajouter les nouvelles lignes au Dataframe actuel
    updated_data = pd.concat([current_data, new_data], ignore_index=True)

    # Red√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(updated_data)

    return {"status": "success", "message": "Data added successfully"}


[
    {
        "tenant": "example_tenant1",
        "i_UID": "user901",
        "profil": "john.doe@example.com",
        "groupe": "Reader",
        "admin": true
    },
    {
        "tenant": "example_tenant2",
        "i_UID": "user902",
        "profil": "jane.doe@example.com",
        "groupe": "Designer",
        "admin": false
    }
]





# V√©rifiez le profil et le statut admin
    if profile not in ["Reader", "Designer"]:
        return {"status": "error", "message": "Invalid profile value. Accepted values are 'Reader' or 'Designer'."}
    
    if not isinstance(admin, bool):
        return {"status": "error", "message": "Admin value should be a boolean (True or False)."}




def api_py_function(id, uid_user, first_name, last_name, email, profile):
    import dataikuapi
    import pandas as pd
    import urllib3
    import dataiku

    # D√©sactiver l'avertissement SSL
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    # Configuration Dataiku
    dataiku.set_remote_dss("https://s02v19900033.fr.net.intra:10443", "hnleqTNWnL1H4r03oygjnesbSmSpXbIN", no_check_certificate=True)

    # CIA de votre projet Dataiku
    project_key = "API_MARKETPLACE"

    # Nom de votre dataset
    dataset_name = "test_prepared"

    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)

    # Charger les donn√©es actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    # V√©rifier si l'email ou l'uid_user existe d√©j√†
    if email in current_data['email'].values:
        return {"status": "error", "message": "Email already exists in the dataset."}

    if uid_user in current_data['uid_user'].values:
        return {"status": "error", "message": "UID User already exists in the dataset."}
    if current_data.empty or pd.isna(current_data['id'].max()):
        new_id = 1
    else:
        new_id = current_data['id'].max() + 1
    # Ajouter une nouvelle ligne
    new_row = pd.DataFrame({
        "id": [id],
        "uid_user": [uid_user],
        "first_name": [first_name],
        "last_name": [last_name],
        "email": [email],
        "profile": [profile]
    })

    # Ajouter la nouvelle ligne au Dataframe
    updated_data = pd.concat([current_data, new_row], ignore_index=True)

    # Red√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(updated_data)

    return {"status": "success", "message": "Data added successfully"}





# Import des modules n√©cessaires
import dataiku
import pandas as pd

# Fonction pour l'endpoint
def add_new_data(request):
    # Extraction des donn√©es de la requ√™te
    data = request.get_json()
    
    # Sp√©cifiez le projet et le dataset
    project_key = "API_MARKETPLACE"
    dataset_name = "test_prepared"

    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)

    # Charger les donn√©es actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    # Construire la nouvelle ligne √† partir de la requ√™te
    new_row = pd.DataFrame({
        "id": [data['id']],
        "uid_user": [data['uid_user']],
        "first_name": [data['first_name']],
        "last_name": [data['last_name']],
        "email": [data['email']],
        "profile": [data['profile']]
    })

    # Ajouter la nouvelle ligne au Dataframe
    current_data = pd.concat([current_data, new_row], ignore_index=True)

    # Red√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(current_data)
    
    return {"status": "success", "message": "Data added successfully"}




{
    "id": 32,
    "uid_user": "user888",
    "first_name": "John",
    "last_name": "Doe",
    "email": "johndoe@gmail.com",
    "profile": "Reader"
}







import dataiku
import pandas as pd

def add_row_to_dataiku_dataset(id, uid_user, first_name, last_name, email, profile):
    """
    Ajoute une nouvelle ligne √† un dataset Dataiku.

    Args:
    - id (int): ID de l'utilisateur.
    - uid_user (str): UID de l'utilisateur.
    - first_name (str): Pr√©nom de l'utilisateur.
    - last_name (str): Nom de famille de l'utilisateur.
    - email (str): Email de l'utilisateur.
    - profile (str): Profil de l'utilisateur.

    Returns:
    - DataFrame: Le dataset mis √† jour.
    """
    # Configuration Dataiku
    dataiku.set_remote_dss("https://dataiku-demo.dev-echonet/","InWeqTNWnL1H4r03oygjnesbSmSpXbIN",no_check_certificate=True)

    # CIA de votre projet Dataiku
    project_key = "API_MARKETPLACE"
    
    # Nom de votre dataset
    dataset_name = "test_prepared"
    
    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)
    
    # Charger les donnes actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    # Afficher les donn√©es actuelles
    print("Donn√©es actuelles:")
    print(current_data.head())
    print("...")

    # Cr√©er un DataFrame pour la nouvelle ligne √† partir des param√®tres
    new_row_df = pd.DataFrame({
        "id": [id],
        "uid_user": [uid_user],
        "first_name": [first_name],
        "last_name": [last_name],
        "email": [email],
        "profile": [profile]
    })

    # Ajouter la nouvelle ligne au Dataframe
    updated_data = pd.concat([current_data, new_row_df], ignore_index=True)

    # Afficher les donn√©es mises √† jour
    print("\nDonn√©es apr√®s l'ajout:")
    print(updated_data.tail())
    print("...")

    # Red√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(updated_data)

    return updated_data

# Utilisation de la fonction
add_row_to_dataiku_dataset(31, "user777", "newuser", "newuser", "newuser@gmail.com", "Reader")






import dataiku
import pandas as pd

def add_row_to_dataiku_dataset(new_row_data):
    """
    Ajoute une nouvelle ligne √† un dataset Dataiku.

    Args:
    - new_row_data (dict): Donn√©es de la nouvelle ligne √† ajouter.

    Returns:
    - DataFrame: Le dataset mis √† jour.
    """
    # Configuration Dataiku
    dataiku.set_remote_dss("https://dataiku-demo.dev-echonet/","InWeqTNWnL1H4r03oygjnesbSmSpXbIN",no_check_certificate=True)

    # CIA de votre projet Dataiku
    project_key = "API_MARKETPLACE"
    
    # Nom de votre dataset
    dataset_name = "test_prepared"
    
    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)
    
    # Charger les donnes actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    # Afficher les donn√©es actuelles
    print("Donn√©es actuelles:")
    print(current_data.head())
    print("...")

    # Convertir le dictionnaire new_row_data en DataFrame
    new_row_df = pd.DataFrame(new_row_data)

    # Ajouter la nouvelle ligne au Dataframe
    updated_data = pd.concat([current_data, new_row_df], ignore_index=True)

    # Afficher les donn√©es mises √† jour
    print("\nDonn√©es apr√®s l'ajout:")
    print(updated_data.tail())
    print("...")

    # Red√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(updated_data)

    return updated_data

# Utilisation de la fonction
new_data = {
    "id": [31],
    "uid_user": ["user777"],
    "first_name": ["newuser"],
    "last_name": ["newuser"],
    "email": ["newuser@gmail.com"],
    "profile": ["Reader"]
}
add_row_to_dataiku_dataset(new_data)



*******


import dataiku
import dataikuapi
import pandas as pd
import urllib3

# D√©sactiver l'avertissement SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Configuration Dataiku
dataiku.set_remote_dss("https://dataiku-demo.dev-echonet/", "InWeqTNWnL1H4r03oygjnesbSmSpXbIN", no_check_certificate=True)

# CIA de votre projet Dataiku
project_key = "API_MARKETPLACE"

# Nom de votre dataset
dataset_name = "test_prepared"

# Obtenir le dataset
dataset = dataiku.Dataset(dataset_name, project_key)

# Charger les donn√©es actuelles du dataset dans un DataFrame
current_data = dataset.get_dataframe()

# Afficher les donn√©es actuelles
print("Donn√©es actuelles:")
print(current_data.head())
print("...")

# Ajouter une nouvelle ligne
new_row = pd.DataFrame({
    "id": [31],
    "uid_user": ["user777"],
    "first_name": ["newuser"],
    "last_name": ["newuser"],
    "email": ["newuser@gmail.com"],
    "profile": ["Reader"]
})

# Ajouter la nouvelle ligne au Dataframe
updated_data = pd.concat([current_data, new_row], ignore_index=True)

# Convertir les colonnes de date en cha√Ænes de caract√®res pour √©viter l'erreur 'is_datetimetz'
for col in updated_data.columns:
    if updated_data[col].dtype == 'datetime64[ns]':
        updated_data[col] = updated_data[col].astype(str)

# Afficher les donn√©es mises √† jour
print("\nDonn√©es apr√®s l'ajout:")
print(updated_data.tail())
print("...")

# Red√©crire les donn√©es mises √† jour dans le dataset
dataset.write_with_schema(updated_data)











import dataiku
import dataikuapi
import pandas as pd

dataiku.set_remote_dss("https://dataiku-demo.dev-echonet/","InWeqTNWnL1H4r03oygjnesbSmSpXbIN",no_check_certificate=True)

# CIA de votre projet Dataiku
project_key = "API_MARKETPLACE"

# Nom de votre dataset
dataset_name = "test_prepared"

# Obtenir le dataset
dataset = dataiku.Dataset(dataset_name, project_key)

# Charger les donnes actuelles du dataset dans un DataFrame
current_data = dataset.get_dataframe()

print(current_data)

# Ajouter une nouvelle ligne (remplacez les valeurs par celles de la nouvelle ligne)
new_row = pd.DataFrame({
    "id": [31],
    "uid_user": ["user777"],
    "first_name": ["newuser"],
    "last_name": ["newuser"],
    "email": ["newuser@gmail.com"],
    "profile": ["Reader"]
})

# Ajouter la nouvelle ligne au Dataframe
current_data = pd.concat([current_data, new_row], ignore_index=True)

# Red√©crire les donn√©es mises √† jour dans le dataset
dataset.write_with_schema(current_data)





curl -s -u username:password "URL_du_site" | grep -o 'expires="[^"]*"' | awk -F '"' '{print $2}'

import dataikuapi

# Informations d'authentification
host = "https://YOUR_DATAIKU_INSTANCE_URL"
api_key = "YOUR_API_KEY"

# Se connecter √† l'instance Dataiku
client = dataikuapi.DSSClient(host, api_key)

# Sp√©cifier le projet et le dataset
project_key = "YOUR_PROJECT_KEY"
dataset_name = "test_prepared"

# Obtenir le dataset
project = client.get_project(project_key)
dataset = project.get_dataset(dataset_name)

# Obtenir les partitions du dataset
partitions = dataset.get_partitions()

# Obtenir les donn√©es actuelles du dataset dans un DataFrame
current_data = []
for partition in partitions:
    data_slice = partition.get_slice()
    current_data.append(data_slice.get_dataframe())

# Concat√©ner les donn√©es de toutes les partitions
current_data = pd.concat(current_data, ignore_index=True)

# Ajouter une nouvelle ligne au DataFrame
new_row = {
    "id": 3,
    "uid user": "user 777",
    "first name": "newuser",
    "last name": "newuser",
    "email": "newuser@gmail.com",
    "profile": "Reader"
}
current_data = current_data.append(new_row, ignore_index=True)

# R√©√©crire les donn√©es mises √† jour dans le dataset
data_slice = dataset.get_location().get_slice()
data_slice.write_dataframe(current_data)



import dataikuapi

# Informations d'authentification
host = "https://YOUR_DATAIKU_INSTANCE_URL"
api_key = "YOUR_API_KEY"

# Se connecter √† l'instance Dataiku
client = dataikuapi.DSSClient(host, api_key)

# Sp√©cifier le projet et le dataset
project_key = "YOUR_PROJECT_KEY"
dataset_name = "test_prepared"

# Obtenir le dataset
project = client.get_project(project_key)
dataset = project.get_dataset(dataset_name)

# Charger les donn√©es actuelles du dataset dans un DataFrame
current_data = dataset.get_dataframe()

# Ajouter une nouvelle ligne au DataFrame
new_row = {
    "id": 3,
    "uid user": "user 777",
    "first name": "newuser",
    "last name": "newuser",
    "email": "newuser@gmail.com",
    "profile": "Reader"
}
current_data = current_data.append(new_row, ignore_index=True)

# R√©√©crire les donn√©es mises √† jour dans le dataset
dataset.write_with_schema(current_data)








from fastapi import APIRouter
import dataikuapi

# Cr√©er une instance du client Dataiku en utilisant l'hostname et la cl√© API
dataiku_hostname = "https://design-dataiku.dev.echonet/"
dataiku_api_key = "VOTRE_CLE_API_DATAIKU"
client = dataikuapi.DSSClient(dataiku_hostname, dataiku_api_key)

# D√©sactiver la v√©rification du certificat SSL
client._session.verify = False

# Cr√©er un routeur FastAPI
router = APIRouter()

# Initialiser l'ID auto-incr√©ment√©
id = 2

@router.post("/insert-into-dataset")
async def insert_into_dataset(user: UserBase):
    global id
    
    # Nom de votre projet et nom du dataset
    project_key = "API DATAIKU"
    dataset_name = "test"
    
    # Obtenir le dataset depuis Dataiku
    dataset = client.get_project(project_key).get_dataset(dataset_name)
    
    # Ajouter une nouvelle ligne avec les donn√©es de l'utilisateur
    new_row = {
        "id": id,
        "uid_user": user.uid_user,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "email": user.email,
        "profile": user.profile
    }
    
    # Charger les donn√©es actuelles du dataset
    current_data = dataset.read_dataframe()
    
    # Ajouter la nouvelle ligne au DataFrame
    current_data = current_data.append(new_row, ignore_index=True)
    
    # R√©√©crire les donn√©es mises √† jour dans le dataset
    dataset.write_with_schema(current_data)
    
    # Incr√©menter l'ID auto-incr√©ment√©
    id += 1
    
    return {"message": "Donn√©es ins√©r√©es avec succ√®s dans le dataset."}
