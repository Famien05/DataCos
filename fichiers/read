import dataiku
import pandas as pd

def add_row_to_dataiku_dataset(id, uid_user, first_name, last_name, email, profile):
    """
    Ajoute une nouvelle ligne à un dataset Dataiku.

    Args:
    - id (int): ID de l'utilisateur.
    - uid_user (str): UID de l'utilisateur.
    - first_name (str): Prénom de l'utilisateur.
    - last_name (str): Nom de famille de l'utilisateur.
    - email (str): Email de l'utilisateur.
    - profile (str): Profil de l'utilisateur.

    Returns:
    - DataFrame: Le dataset mis à jour.
    """
    # Configuration Dataiku
    dataiku.set_remote_dss("https://dataiku-demo.dev-echonet/","InWeqTNWnL1H4r03oygjnesbSmSpXbIN",no_check_certificate=True)

    # CIA de votre projet Dataiku
    project_key = "API_MARKETPLACE"
    
    # Nom de votre dataset
    dataset_name = "test_prepared"
    
    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)
    
    # Charger les donnes actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    # Afficher les données actuelles
    print("Données actuelles:")
    print(current_data.head())
    print("...")

    # Créer un DataFrame pour la nouvelle ligne à partir des paramètres
    new_row_df = pd.DataFrame({
        "id": [id],
        "uid_user": [uid_user],
        "first_name": [first_name],
        "last_name": [last_name],
        "email": [email],
        "profile": [profile]
    })

    # Ajouter la nouvelle ligne au Dataframe
    updated_data = pd.concat([current_data, new_row_df], ignore_index=True)

    # Afficher les données mises à jour
    print("\nDonnées après l'ajout:")
    print(updated_data.tail())
    print("...")

    # Redécrire les données mises à jour dans le dataset
    dataset.write_with_schema(updated_data)

    return updated_data

# Utilisation de la fonction
add_row_to_dataiku_dataset(31, "user777", "newuser", "newuser", "newuser@gmail.com", "Reader")






import dataiku
import pandas as pd

def add_row_to_dataiku_dataset(new_row_data):
    """
    Ajoute une nouvelle ligne à un dataset Dataiku.

    Args:
    - new_row_data (dict): Données de la nouvelle ligne à ajouter.

    Returns:
    - DataFrame: Le dataset mis à jour.
    """
    # Configuration Dataiku
    dataiku.set_remote_dss("https://dataiku-demo.dev-echonet/","InWeqTNWnL1H4r03oygjnesbSmSpXbIN",no_check_certificate=True)

    # CIA de votre projet Dataiku
    project_key = "API_MARKETPLACE"
    
    # Nom de votre dataset
    dataset_name = "test_prepared"
    
    # Obtenir le dataset
    dataset = dataiku.Dataset(dataset_name, project_key)
    
    # Charger les donnes actuelles du dataset dans un DataFrame
    current_data = dataset.get_dataframe()

    # Afficher les données actuelles
    print("Données actuelles:")
    print(current_data.head())
    print("...")

    # Convertir le dictionnaire new_row_data en DataFrame
    new_row_df = pd.DataFrame(new_row_data)

    # Ajouter la nouvelle ligne au Dataframe
    updated_data = pd.concat([current_data, new_row_df], ignore_index=True)

    # Afficher les données mises à jour
    print("\nDonnées après l'ajout:")
    print(updated_data.tail())
    print("...")

    # Redécrire les données mises à jour dans le dataset
    dataset.write_with_schema(updated_data)

    return updated_data

# Utilisation de la fonction
new_data = {
    "id": [31],
    "uid_user": ["user777"],
    "first_name": ["newuser"],
    "last_name": ["newuser"],
    "email": ["newuser@gmail.com"],
    "profile": ["Reader"]
}
add_row_to_dataiku_dataset(new_data)



*******


import dataiku
import dataikuapi
import pandas as pd
import urllib3

# Désactiver l'avertissement SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Configuration Dataiku
dataiku.set_remote_dss("https://dataiku-demo.dev-echonet/", "InWeqTNWnL1H4r03oygjnesbSmSpXbIN", no_check_certificate=True)

# CIA de votre projet Dataiku
project_key = "API_MARKETPLACE"

# Nom de votre dataset
dataset_name = "test_prepared"

# Obtenir le dataset
dataset = dataiku.Dataset(dataset_name, project_key)

# Charger les données actuelles du dataset dans un DataFrame
current_data = dataset.get_dataframe()

# Afficher les données actuelles
print("Données actuelles:")
print(current_data.head())
print("...")

# Ajouter une nouvelle ligne
new_row = pd.DataFrame({
    "id": [31],
    "uid_user": ["user777"],
    "first_name": ["newuser"],
    "last_name": ["newuser"],
    "email": ["newuser@gmail.com"],
    "profile": ["Reader"]
})

# Ajouter la nouvelle ligne au Dataframe
updated_data = pd.concat([current_data, new_row], ignore_index=True)

# Convertir les colonnes de date en chaînes de caractères pour éviter l'erreur 'is_datetimetz'
for col in updated_data.columns:
    if updated_data[col].dtype == 'datetime64[ns]':
        updated_data[col] = updated_data[col].astype(str)

# Afficher les données mises à jour
print("\nDonnées après l'ajout:")
print(updated_data.tail())
print("...")

# Redécrire les données mises à jour dans le dataset
dataset.write_with_schema(updated_data)











import dataiku
import dataikuapi
import pandas as pd

dataiku.set_remote_dss("https://dataiku-demo.dev-echonet/","InWeqTNWnL1H4r03oygjnesbSmSpXbIN",no_check_certificate=True)

# CIA de votre projet Dataiku
project_key = "API_MARKETPLACE"

# Nom de votre dataset
dataset_name = "test_prepared"

# Obtenir le dataset
dataset = dataiku.Dataset(dataset_name, project_key)

# Charger les donnes actuelles du dataset dans un DataFrame
current_data = dataset.get_dataframe()

print(current_data)

# Ajouter une nouvelle ligne (remplacez les valeurs par celles de la nouvelle ligne)
new_row = pd.DataFrame({
    "id": [31],
    "uid_user": ["user777"],
    "first_name": ["newuser"],
    "last_name": ["newuser"],
    "email": ["newuser@gmail.com"],
    "profile": ["Reader"]
})

# Ajouter la nouvelle ligne au Dataframe
current_data = pd.concat([current_data, new_row], ignore_index=True)

# Redécrire les données mises à jour dans le dataset
dataset.write_with_schema(current_data)





curl -s -u username:password "URL_du_site" | grep -o 'expires="[^"]*"' | awk -F '"' '{print $2}'

import dataikuapi

# Informations d'authentification
host = "https://YOUR_DATAIKU_INSTANCE_URL"
api_key = "YOUR_API_KEY"

# Se connecter à l'instance Dataiku
client = dataikuapi.DSSClient(host, api_key)

# Spécifier le projet et le dataset
project_key = "YOUR_PROJECT_KEY"
dataset_name = "test_prepared"

# Obtenir le dataset
project = client.get_project(project_key)
dataset = project.get_dataset(dataset_name)

# Obtenir les partitions du dataset
partitions = dataset.get_partitions()

# Obtenir les données actuelles du dataset dans un DataFrame
current_data = []
for partition in partitions:
    data_slice = partition.get_slice()
    current_data.append(data_slice.get_dataframe())

# Concaténer les données de toutes les partitions
current_data = pd.concat(current_data, ignore_index=True)

# Ajouter une nouvelle ligne au DataFrame
new_row = {
    "id": 3,
    "uid user": "user 777",
    "first name": "newuser",
    "last name": "newuser",
    "email": "newuser@gmail.com",
    "profile": "Reader"
}
current_data = current_data.append(new_row, ignore_index=True)

# Réécrire les données mises à jour dans le dataset
data_slice = dataset.get_location().get_slice()
data_slice.write_dataframe(current_data)



import dataikuapi

# Informations d'authentification
host = "https://YOUR_DATAIKU_INSTANCE_URL"
api_key = "YOUR_API_KEY"

# Se connecter à l'instance Dataiku
client = dataikuapi.DSSClient(host, api_key)

# Spécifier le projet et le dataset
project_key = "YOUR_PROJECT_KEY"
dataset_name = "test_prepared"

# Obtenir le dataset
project = client.get_project(project_key)
dataset = project.get_dataset(dataset_name)

# Charger les données actuelles du dataset dans un DataFrame
current_data = dataset.get_dataframe()

# Ajouter une nouvelle ligne au DataFrame
new_row = {
    "id": 3,
    "uid user": "user 777",
    "first name": "newuser",
    "last name": "newuser",
    "email": "newuser@gmail.com",
    "profile": "Reader"
}
current_data = current_data.append(new_row, ignore_index=True)

# Réécrire les données mises à jour dans le dataset
dataset.write_with_schema(current_data)








from fastapi import APIRouter
import dataikuapi

# Créer une instance du client Dataiku en utilisant l'hostname et la clé API
dataiku_hostname = "https://design-dataiku.dev.echonet/"
dataiku_api_key = "VOTRE_CLE_API_DATAIKU"
client = dataikuapi.DSSClient(dataiku_hostname, dataiku_api_key)

# Désactiver la vérification du certificat SSL
client._session.verify = False

# Créer un routeur FastAPI
router = APIRouter()

# Initialiser l'ID auto-incrémenté
id = 2

@router.post("/insert-into-dataset")
async def insert_into_dataset(user: UserBase):
    global id
    
    # Nom de votre projet et nom du dataset
    project_key = "API DATAIKU"
    dataset_name = "test"
    
    # Obtenir le dataset depuis Dataiku
    dataset = client.get_project(project_key).get_dataset(dataset_name)
    
    # Ajouter une nouvelle ligne avec les données de l'utilisateur
    new_row = {
        "id": id,
        "uid_user": user.uid_user,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "email": user.email,
        "profile": user.profile
    }
    
    # Charger les données actuelles du dataset
    current_data = dataset.read_dataframe()
    
    # Ajouter la nouvelle ligne au DataFrame
    current_data = current_data.append(new_row, ignore_index=True)
    
    # Réécrire les données mises à jour dans le dataset
    dataset.write_with_schema(current_data)
    
    # Incrémenter l'ID auto-incrémenté
    id += 1
    
    return {"message": "Données insérées avec succès dans le dataset."}
