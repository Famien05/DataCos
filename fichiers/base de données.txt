CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    uid_user VARCHAR(50) UNIQUE NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    profile VARCHAR(50) NOT NULL
);

CREATE TABLE admins (
    id SERIAL PRIMARY KEY,
    uid_admin VARCHAR(50) UNIQUE NOT NULL,
    FOREIGN KEY (uid_admin ) REFERENCES users(uid_user) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE tenants (
    id_tenant SERIAL PRIMARY KEY,
    tenant_name VARCHAR(50) UNIQUE NOT NULL,
    uid_admin VARCHAR(50) UNIQUE NOT NULL,
    created_date DATE NOT NULL,
    FOREIGN KEY (uid_admin ) REFERENCES admins(uid_admin ) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE licenses (
    id_license SERIAL PRIMARY KEY,
    tenant_name VARCHAR(50) UNIQUE NOT NULL,
    license_count INT NOT NULL,
    purchase_date DATE NOT NULL,
    expiration_date DATE NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (tenant_name) REFERENCES tenants(tenant_name) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE OR REPLACE FUNCTION check_license_expiration()
    RETURNS TRIGGER AS
$BODY$
BEGIN
    IF NEW.expiration_date < NOW() THEN
        NEW.is_active = FALSE;
    END IF;
    RETURN NEW;
END;
$BODY$
    LANGUAGE plpgsql;

CREATE TRIGGER license_expiration_trigger
    BEFORE UPDATE ON Licenses
    FOR EACH ROW
    EXECUTE FUNCTION check_license_expiration();

CREATE TABLE groups (
    id_group SERIAL PRIMARY KEY,
    group_name VARCHAR(50) UNIQUE NOT NULL,
    tenant_name VARCHAR(50) NOT NULL,
    description VARCHAR(255) NOT NULL,
    FOREIGN KEY (tenant_name) REFERENCES tenants(tenant_name) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE user_groups (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    group_id INT NOT NULL,
    added_date DATE NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (group_id) REFERENCES groups(id_group) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE add_user_requests (
    id_request SERIAL PRIMARY KEY,
    uid_admin VARCHAR(50) NOT NULL,
    uid_user VARCHAR(50) NOT NULL,
    tenant_id INT NOT NULL,
    group_id INT NOT NULL,
    request_date DATE NOT NULL,
    status VARCHAR(50) NOT NULL,
    FOREIGN KEY (uid_admin ) REFERENCES admins(uid_admin ) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (uid_user) REFERENCES users(uid_user) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (tenant_id) REFERENCES tenants(id_tenant) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (group_id) REFERENCES groups(id_group) ON DELETE CASCADE ON UPDATE CASCADE
);